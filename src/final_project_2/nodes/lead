#!/usr/bin/env python

import rospy
import yaml
import tf
from geometry_msgs.msg import PoseStamped
from tf.transformations import euler_from_quaternion
from geometry_msgs.msg import Point


def go_to(room):
    message = PoseStamped()
    pose_x = data[room]["position"][0]
    pose_x = float(pose_x[2:])
    pose_y = data[room]["position"][1]
    pose_y = float(pose_y[2:])
    oren_z = data[room]["orientation"][2]
    oren_z = float(oren_z[2:])
    message.header.frame_id = "map"
    message.header.stamp = rospy.Time.now()
    message.pose.position.x = pose_x
    message.pose.position.y = pose_y
    message.pose.orientation.w = oren_z
    rospy.set_param('leader_goal', [pose_x, pose_y, oren_z])
    rate = rospy.Rate(1)
    print("off to " + room)
    while True:
        pub.publish(message)
        rate.sleep()
        (position, rotation) = pose()
        x_current = position.x
        y_current = position.y
        w_current = rotation
        if pose_x - 0.5 < x_current < pose_x + 0.5 and pose_y - 0.5 < y_current < pose_y + 0.5 \
                and oren_z - 20 < w_current < oren_z + 20:
            break
    print("we are now in the " + room)
    return None


def pose():
    try:
        (trans, rot) = tf_listener.lookupTransform('/leader_tf/odom', '/leader_tf/base_footprint', rospy.Time(0))
        rotation = euler_from_quaternion(rot)
    except (tf.Exception, tf.ConnectivityException, tf.LookupException):
        rospy.loginfo("TF Exception")
        return
    return Point(*trans), rotation[2]


def yaml_loader(filepath):
    with open(filepath, 'r') as file_descriptor:
        data = yaml.load(file_descriptor)
    return data


if __name__ == '__main__':
    filepath = "/home/alahr/Documents/College/Spring2021/Python_Applications/809e/src/final_project_2/yaml/room_record.yaml"
    data = yaml_loader(filepath)
    pub = rospy.Publisher("/leader/move_base_simple/goal", PoseStamped, queue_size=10)

    rospy.init_node("move_robot")
    tf_listener = tf.TransformListener()

    try:
        tf_listener.waitForTransform('/leader_tf/odom', '/leader_tf/base_footprint', rospy.Time(), rospy.Duration(1))
    except (tf.Exception, tf.ConnectivityException, tf.LookupException):
        rospy.loginfo(
            "Cannot find transform between {p} and {c}".format(p='/leader_tf/odom', c='/leader_tf/base_footprint'))
        rospy.signal_shutdown("tf Exception")

    rospy.Rate(5)

    while not rospy.is_shutdown():
        go_to("livingroom")
        go_to("recreationroom")
        go_to("kitchen")
        go_to("bedroom")
